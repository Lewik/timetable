package timetable

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import org.optaplanner.core.api.solver.SolverManager
import org.optaplanner.core.config.solver.SolverConfig
import java.time.Duration


const val SINGLETON_TIME_TABLE_ID = 1L

val timeSlots = workingDays
    .flatMap { day ->
        (1..8).map { number ->
            TimeSlot(day, number)
        }
    }

fun main(args: Array<String>) {
    main1()
//    main2()
}

fun main1() {


    println("Groups: ${groups.size}")


    val lessons = groups
        .values
        .flatten()

    val problem = TimeTable(
        timeslotList = timeSlots,
        lessonList = lessons
    )

    val solverConfig = SolverConfig().apply {
        solutionClass = TimeTable::class.java
        entityClassList = listOf(
            Lesson::class.java
        )
//        withEasyScoreCalculatorClass(TimeTableEasyScoreCalculator::class.java)
        withConstraintProviderClass(TimeTableConstraintProvider::class.java)
        withTerminationSpentLimit(Duration.ofSeconds(120))
    }

    val manager = SolverManager.create<TimeTable, Long>(solverConfig)
    println("Start")
    val job = manager.solveAndListen(
        SINGLETON_TIME_TABLE_ID,
        { problem },
        {
            println("VARIANT")
            printSolution(it)
        },
        {
            println("BEST")
            printSolution(it)
        },
        { a, b ->
            System.err.println(a)
            System.err.println(b)
        }
    )
//    val job = manager.solve(SINGLETON_TIME_TABLE_ID, problem)

    val solution = job.finalBestSolution
    println("End")

//    val uiTimeTable = UiTimeTable.createFrom(solution)

//    println(Json { prettyPrint = true }.encodeToString(uiTimeTable))


//    printSolution(solution)
}


fun main2() {
    val text = """
        ;Понедельник ;;;;;Вторник ;;;;;Среда ;;;;;Четверг ;;;;;Пятница ;;;;
        ;1;2;3;4;5;1;2;3;4;5;1;2;3;4;5;1;2;3;4;5;1;2;3;4;5
        1а;Математика;Физкультура;Обучение грамоте;Окр ;;Обучение грамоте;Муз;Математика;Письмо;;Обучение грамоте;Письмо;Окр ;Технология;Физкультура;Математика;Обучение грамоте;Письмо;Изо ;;Письмо;Математика ;Физкультура;Обучение грамоте;
        1б;Обучение грамоте;Письмо;Физкультура;Математика;;Математика;Обучение грамоте;Муз;Письмо;;Математика;Физкультура;Окр ;Обучение грамоте;;Обучение грамоте;Письмо;Технология ;Изо ;Физкультура;Письмо;Обучение грамоте;Математика;Окр ;
        1в;Обучение грамоте;Письмо;Математика;Технология;Физкультура;Окр ;Физкультура;Обучение грамоте;Письмо;;Математика;Обучение грамоте;Письмо;Изо ;;Обучение грамоте;Письмо;Муз ;Математика;;Математика;Физкультура;Обучение грамоте;Окр ;
        1г;Окр ;Математика;Муз;Письмо;;Математика;Физкультура;Обучение грамоте;Письмо;;Обучение грамоте;Письмо;Математика;Изо ;;Обучение грамоте;Физкультура;Письмо;Технология ;;Обучение грамоте;Письмо;Математика;Окр ;Физкультура
        2а;Чтение;Физкультура;Русский язык;Математика;;Математика;Англ.яз ;Русский язык;Окр ;Изо ;Чтение;Русский язык;Физкультура;Математика;Технология;Русский язык;Англ.яз ;Чтение;Окр ;;Чтение;Русский язык;Физкультура;Математика;Муз
        2б;Математика;Русский язык;Физкультура;Окр ;Чтение;Математика;Русский язык;Англ.яз ;Изо ;Технология;Математика;Физкультура;Русский язык;Чтение;;Математика;Чтение;Русский язык;Муз;Физкультура;Русский язык;Чтение;Англ.яз ;Окр ;
        2в;Математика;Русский язык;Чтение;Физкультура;;Муз ;Русский язык;Чтение;Окр ;Изо ;Математика;Англ.яз ;Русский язык;Чтение;Технология;Математика;Физкультура;Русский язык;Окр ;;Математика;Русский язык;Чтение;Англ.яз ;Физкультура
        3а;Математика;Русский язык;Англ.яз ;Муз;;Русский язык;Математика;Чтение;Окр ;Физкультура;Математика;Русский язык;Изо ;Чтение;Физкультура;Математика ;Русский язык;Чтение;Технология ;Англ.яз ;Русский язык;Физкультура;Окр ;Чтение;
        3б;Англ.яз ;Муз;Математика;Русский язык;Чтение;Математика;Русский язык;Физкультура;Чтение;;Русский язык;Математика;Чтение;Англ.яз ;Окр ;Математика ;Физкультура;Русский язык;Окр ;Изо ;Русский язык;Чтение;Технология;Физкультура;
        3в;Чтение;Русский язык;Англ.яз ;Математика;Физкультура;Чтение;Окр ;Русский язык;Математика;Англ.яз ;Математика;Русский язык;Физкультура;Технология;Изо ;Окр ;Муз ;Русский язык;Чтение;;Математика;Русский язык;Чтение;Физкультура;
        3г;Математика;Англ.яз ;Русский язык;Физкультура;Чтение;Англ.яз ;Русский язык;Математика;Окр ;Муз ;Математика;Русский язык;Чтение ;Физкультура;Изо ;Русский язык;Математика ;Физкультура;Чтение;;Русский язык;Чтение;Окр ;Технология;
        3д;Чтение;Русский язык;Математика;Окр ;Физкультура;Математика;Англ.яз ;Русский язык;Муз ;;Математика;Русский язык;Физкультура;Чтение ;;Физкультура;Математика ;Русский язык;Чтение;Англ.яз ;Окр ;Русский язык;Чтение;Изо ;Технология
        4а;Математика;Русский язык;орксэ;Англ.яз ;Изо ;Окр ;Русский язык;Математика;Физкультура;;Чтение;Русский язык;Англ.яз ;Математика;Технология;Окр ;Русский язык;Математика;Физкультура;Чтение;Физкультура;Русский язык;Чтение;Муз ;
        4б;Муз ;Русский язык;Физкультура;Математика;Чтение ;Математика;Русский язык;Физкультура;Окр ;;Русский язык;Математика;Англ.яз ;Чтение ;Изо ;Русский язык;Окр ;Англ.яз ;Технология;орксэ;Русский язык;Математика;Физкультура;Чтение ;
        4в;Физкультура;Окр ;орксэ;Русский язык;Математика;Чтение;Русский язык;Математика;Англ.яз ;Изо ;Чтение ;Русский язык;Математика;Физкультура;;Русский язык;Математика ;Чтение;Англ.яз ;Технология;Муз ;Физкультура;Русский язык;Окр ;
    """.trimIndent()

    val result = text
        .lines()
        .drop(2)
        .associate { row ->
            val cells = row.split(";")
            val group = cells[0]
            val lessons = cells
                .drop(1)
                .map { it.trim() }
                .filter { it.isNotBlank() }
                .chunked(5)

            group to lessons
        }

    val json = Json { prettyPrint = true }.encodeToString(result)
//    println(json)

    val flatten = result.values.flatten().flatten().sorted()
    println("lessons: ${flatten.distinct()}")

    println("lessons per class")
    result.forEach { (group, list) ->
        println("$group: ${list.flatten().groupingBy { it }.eachCount().toSortedMap()}")
    }

}
